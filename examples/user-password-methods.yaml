# Example demonstrating both password configuration methods

---
# Secret containing the password (recommended for production)
apiVersion: v1
kind: Secret
metadata:
  name: user1-password
  namespace: default
type: Opaque
data:
  password: cGFzc3dvcmQxMjM=  # base64 encoded "password123"

---
# User with secret-based password (recommended for production)
apiVersion: ftp.golder.org/v1
kind: User
metadata:
  name: user1-secret
  namespace: default
spec:
  username: "user1"
  passwordSecret:
    name: "user1-password"
    key: "password"  # optional, defaults to "password"
    # namespace: "default"  # optional, defaults to User namespace
  backend:
    kind: MinioBackend
    name: my-minio-backend
  homeDirectory: "/home/user1"
  enabled: true
  permissions:
    read: true
    write: true
    delete: false
    list: true

---
# User with plaintext password (not recommended for production)
apiVersion: ftp.golder.org/v1
kind: User
metadata:
  name: user2-plaintext
  namespace: default
spec:
  username: "user2"
  password: "plaintext123"  # Not recommended for production
  backend:
    kind: MinioBackend
    name: my-minio-backend
  homeDirectory: "/home/user2"
  enabled: true
  permissions:
    read: true
    write: true
    delete: false
    list: true

---
# Example with custom secret key
apiVersion: v1
kind: Secret
metadata:
  name: user3-credentials
  namespace: default
type: Opaque
data:
  ftp-password: c2VjcmV0UGFzczQ1Ng==  # base64 encoded "secretPass456"
  
---
apiVersion: ftp.golder.org/v1
kind: User
metadata:
  name: user3-custom-key
  namespace: default
spec:
  username: "user3"
  passwordSecret:
    name: "user3-credentials"
    key: "ftp-password"  # Custom key name
  backend:
    kind: MinioBackend
    name: my-minio-backend
  homeDirectory: "/home/user3"
  enabled: true