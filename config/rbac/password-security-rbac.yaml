# RBAC Configuration for Secure Password Management
# This provides fine-grained access control for KubeFTPd password secrets

---
# ClusterRole for KubeFTPd to access User CRDs across namespaces
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kubeftpd-user-manager
rules:
# Access to User CRDs
- apiGroups: ["ftp.golder.org"]
  resources: ["users"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["ftp.golder.org"]
  resources: ["users/status"]
  verbs: ["get", "update", "patch"]
# Access to backend CRDs
- apiGroups: ["ftp.golder.org"]
  resources: ["miniobackends", "webdavbackends", "filesystembackends"]
  verbs: ["get", "list", "watch"]

---
# ClusterRole for reading password secrets (restricted)
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kubeftpd-secret-reader
rules:
# Limited secret access - only for FTP password secrets
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get"]
  # Only secrets with specific labels
  resourceNames: []  # Will be restricted by namespace-level RoleBindings

---
# ServiceAccount for KubeFTPd controller
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kubeftpd-controller
  namespace: kubeftpd-system

---
# ServiceAccount for KubeFTPd FTP server
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kubeftpd-server
  namespace: kubeftpd-system

---
# Bind controller permissions
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kubeftpd-controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kubeftpd-user-manager
subjects:
- kind: ServiceAccount
  name: kubeftpd-controller
  namespace: kubeftpd-system

---
# Bind server permissions  
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kubeftpd-server
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kubeftpd-user-manager
subjects:
- kind: ServiceAccount
  name: kubeftpd-server
  namespace: kubeftpd-system

---
# Template: Per-namespace Role for secret access
# This should be created in each namespace containing FTP users
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: NAMESPACE_NAME  # Replace with actual namespace
  name: kubeftpd-ftp-secrets
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list"]
  # Restrict to secrets with FTP password label
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get"]
  resourceNames: ["*-ftp-password", "*-ftp-credentials"]

---
# Template: Per-namespace RoleBinding for secret access
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: kubeftpd-secret-access
  namespace: NAMESPACE_NAME  # Replace with actual namespace
subjects:
- kind: ServiceAccount
  name: kubeftpd-server
  namespace: kubeftpd-system
roleRef:
  kind: Role
  name: kubeftpd-ftp-secrets
  apiGroup: rbac.authorization.k8s.io

---
# NetworkPolicy: Restrict access to FTP password secrets
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: ftp-secret-access-policy
  namespace: NAMESPACE_NAME  # Replace with actual namespace
spec:
  podSelector:
    matchLabels:
      purpose: ftp-password-management
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: kubeftpd-system
    - podSelector:
        matchLabels:
          app: kubeftpd
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    ports:
    - protocol: TCP
      port: 443  # Kubernetes API

---
# PodSecurityPolicy for FTP secret management
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: kubeftpd-secret-management
spec:
  privileged: false
  allowPrivilegeEscalation: false
  requiredDropCapabilities:
    - ALL
  volumes:
    - 'secret'
    - 'configMap'
    - 'projected'
    - 'downwardAPI'
    - 'emptyDir'
  runAsUser:
    rule: 'MustRunAsNonRoot'
  seLinux:
    rule: 'RunAsAny'
  fsGroup:
    rule: 'RunAsAny'