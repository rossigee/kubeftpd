name: CI

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

env:
  GO_VERSION: '1.25'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code quality and security checks
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run go vet
      run: go vet ./...

    - name: Install golangci-lint
      run: |
        curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.55.2
        echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

    - name: Run golangci-lint
      run: golangci-lint run --timeout=5m

    - name: Install gosec
      run: go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest

    - name: Run gosec security scanner
      run: gosec -fmt sarif -out gosec.sarif -stdout -verbose=text ./...

    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: gosec.sarif

  # Unit tests with coverage
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Install kubebuilder
      run: |
        curl -L -o kubebuilder https://go.kubebuilder.io/dl/latest/$(go env GOOS)/$(go env GOARCH)
        chmod +x kubebuilder && sudo mv kubebuilder /usr/local/bin/

    - name: Run tests with coverage
      run: make test-coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: |
          coverage.out
          coverage.html

  # Integration tests
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    services:
      minio:
        image: minio/minio:latest
        ports:
          - 9000:9000
        env:
          MINIO_ROOT_USER: minioadmin
          MINIO_ROOT_PASSWORD: minioadmin123
        options: --health-cmd "curl -f http://localhost:9000/minio/health/live" --health-interval 30s --health-timeout 10s --health-retries 3

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Set up MinIO bucket
      run: |
        curl -L -o mc https://dl.min.io/client/mc/release/linux-amd64/mc
        chmod +x mc
        ./mc alias set minio http://localhost:9000 minioadmin minioadmin123
        ./mc mb minio/test-bucket --ignore-existing

    - name: Run integration tests
      run: make test-integration
      env:
        MINIO_ENDPOINT: http://localhost:9000
        MINIO_ACCESS_KEY: minioadmin
        MINIO_SECRET_KEY: minioadmin123
        MINIO_BUCKET: test-bucket

  # Build and validate Docker image
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [quality, test]
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} --version || true
        docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} --help || true

  # E2E tests with Kind cluster
  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [build]
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Create Kind cluster
      uses: helm/kind-action@v1
      with:
        cluster_name: kubeftpd-test
        config: .github/kind-config.yaml

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and load Docker image to Kind
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        load: true
        tags: kubeftpd:test
        cache-from: type=gha

    - name: Load image into Kind cluster
      run: |
        kind load docker-image kubeftpd:test --name kubeftpd-test

    - name: Install CRDs
      run: |
        kubectl apply -f config/crd/bases/

    - name: Deploy to Kind cluster
      run: |
        kubectl create namespace kubeftpd-system
        kubectl apply -f config/rbac/
        # Create test deployment with our built image
        sed 's|controller:latest|kubeftpd:test|g' config/manager/manager.yaml | kubectl apply -f -

    - name: Wait for deployment
      run: |
        kubectl wait --for=condition=available --timeout=300s deployment/kubeftpd-controller-manager -n kubeftpd-system

    - name: Run E2E tests
      run: make test-e2e
      env:
        KUBECONFIG: /home/runner/.kube/config

    - name: Collect logs on failure
      if: failure()
      run: |
        kubectl logs -n kubeftpd-system deployment/kubeftpd-controller-manager --all-containers=true
        kubectl describe pods -n kubeftpd-system
        kubectl get events -n kubeftpd-system --sort-by='.lastTimestamp'

  # Manifest validation
  manifests:
    name: Validate Manifests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install kubebuilder
      run: |
        curl -L -o kubebuilder https://go.kubebuilder.io/dl/latest/$(go env GOOS)/$(go env GOARCH)
        chmod +x kubebuilder && sudo mv kubebuilder /usr/local/bin/

    - name: Generate manifests
      run: make manifests

    - name: Verify manifests are up to date
      run: |
        if ! git diff --quiet; then
          echo "Generated manifests are out of date. Please run 'make manifests' and commit the changes."
          git diff
          exit 1
        fi

    - name: Validate CRD schemas
      run: make validate-manifests

    - name: Install kubeval
      run: |
        curl -L https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz | tar xz
        sudo mv kubeval /usr/local/bin

    - name: Validate Kubernetes manifests
      run: |
        find config -name "*.yaml" -exec kubeval {} \;

  # Dependency scan
  dependencies:
    name: Dependency Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'